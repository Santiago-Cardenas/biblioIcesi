{
    "info": {
        "name": "BiblioIcesi API - Complete Testing",
        "description": "Sistema completo de gesti\u00f3n de biblioteca con todas las pruebas de autenticaci\u00f3n y autorizaci\u00f3n",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:3000/api"
        },
        {
            "key": "adminToken",
            "value": ""
        },
        {
            "key": "userToken",
            "value": ""
        },
        {
            "key": "adminUserId",
            "value": ""
        },
        {
            "key": "regularUserId",
            "value": ""
        },
        {
            "key": "categoryId",
            "value": ""
        },
        {
            "key": "bookId",
            "value": ""
        },
        {
            "key": "copyId",
            "value": ""
        },
        {
            "key": "loanId",
            "value": ""
        },
        {
            "key": "reservationId",
            "value": ""
        }
    ],
    "item": [
        {
            "name": "\ud83d\udd10 Authentication",
            "item": [
                {
                    "name": "Register Admin User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has user data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('user');",
                                    "    pm.expect(jsonData.user).to.have.property('id');",
                                    "    pm.expect(jsonData.user).to.have.property('email');",
                                    "    pm.expect(jsonData.user.role).to.eql('ADMIN');",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('adminUserId', response.user.id);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Admin User\",\n    \"email\": \"admin@biblioicesi.com\",\n    \"password\": \"admin123\",\n    \"role\": \"ADMIN\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "Register Regular User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('regularUserId', response.user.id);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Regular User\",\n    \"email\": \"user@biblioicesi.com\",\n    \"password\": \"12345678\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "Login Admin",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has token and user data\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('token');",
                                    "    pm.expect(jsonData).to.have.property('user');",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('adminToken', response.token);",
                                    "    pm.environment.set('adminUserId', response.user.id);",
                                    "    console.log(\"\u2705 Admin token y userId guardados en Environment\");",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"admin@biblioicesi.com\",\n    \"password\": \"admin123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    }
                },
                {
                    "name": "Login Regular User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has token and user data\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('token');",
                                    "    pm.expect(jsonData).to.have.property('user');",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('userToken', response.token);",
                                    "    pm.environment.set('regularUserId', response.user.id);",
                                    "    console.log(\"\u2705 User token y userId guardados en Environment\");",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"user@biblioicesi.com\",\n    \"password\": \"12345678\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Login with Invalid Credentials",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Login fails with invalid credentials\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message', 'Invalid credentials');",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('userToken', response.token);",
                                    "    pm.environment.set('regularUserId', response.user.id);",
                                    "    console.log(\"\u2705 User token y userId guardados en Environment\");",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"admin@biblioicesi.com\",\n    \"password\": \"wrongpassword\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udc65 Users Management",
            "item": [
                {
                    "name": "\u2705 Admin: Get My Profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Profile data returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('email');",
                                    "    pm.expect(jsonData).to.have.property('name');",
                                    "    pm.expect(jsonData).to.have.property('role');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/profile",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "profile"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Regular User: Get My Profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Profile data returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.role).to.eql('USER');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/profile",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "profile"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Get Profile Without Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/users/profile",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "profile"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Get All Users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Users array returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Regular User: Get All Users (Should Fail)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});",
                                    "",
                                    "pm.test(\"Insufficient permissions message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('permissions');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Create New User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"New Test User\",\n    \"email\": \"newuser@test.com\",\n    \"password\": \"password123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Regular User: Create User (Should Fail)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Unauthorized User\",\n    \"email\": \"unauthorized@test.com\",\n    \"password\": \"password123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udcda Categories",
            "item": [
                {
                    "name": "\u2705 Public: Get All Categories",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Categories array returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/categories",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "categories"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Create Category",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('categoryId', response._id);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Science Fiction\",\n    \"description\": \"Science fiction and fantasy books\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/categories",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "categories"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Regular User: Create Category (Should Fail)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Unauthorized Category\",\n    \"description\": \"Should not be created\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/categories",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "categories"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Update Category",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Science Fiction - Updated\",\n    \"description\": \"Updated description for science fiction books\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/categories/{{categoryId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "categories",
                                "{{categoryId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Get Category by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Category data returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('name');",
                                    "    pm.expect(jsonData).to.have.property('_id');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/categories/{{categoryId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "categories",
                                "{{categoryId}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udcd6 Books",
            "item": [
                {
                    "name": "\u2705 Public: Get All Books",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Books array returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/books",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Create Book",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('bookId', response._id);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"The Hitchhiker's Guide to the Galaxy\",\n    \"author\": \"Douglas Adams\",\n    \"isbn\": \"9780345391803\",\n    \"editorial\": \"Del Rey\",\n    \"year\": 1979,\n    \"categoryId\": \"{{categoryId}}\",\n    \"description\": \"A comic science fiction series\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/books",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Regular User: Create Book (Should Fail)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Unauthorized Book\",\n    \"author\": \"Unknown Author\",\n    \"isbn\": \"1234567890\",\n    \"categoryId\": \"{{categoryId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/books",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Get Book by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Book data with populated category\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('title');",
                                    "    pm.expect(jsonData).to.have.property('author');",
                                    "    pm.expect(jsonData).to.have.property('categoryId');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/books/{{bookId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books",
                                "{{bookId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Search Books",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Search results returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/books?search=Hitchhiker",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ],
                            "query": [
                                {
                                    "key": "search",
                                    "value": "Hitchhiker"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Filter Books by Category",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/books?category={{categoryId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ],
                            "query": [
                                {
                                    "key": "category",
                                    "value": "{{categoryId}}"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udcc4 Copies",
            "item": [
                {
                    "name": "\u2705 Admin: Create Copy",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('copyId', response._id);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"bookId\": \"{{bookId}}\",\n    \"code\": \"COPY-001\",\n    \"status\": \"AVAILABLE\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/copies",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "copies"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Create Second Copy",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"bookId\": \"{{bookId}}\",\n    \"code\": \"COPY-002\",\n    \"status\": \"AVAILABLE\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/copies",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "copies"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Public: Get All Copies",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Copies array returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/copies",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "copies"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Get Available Copies Only",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/copies?available=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "copies"
                            ],
                            "query": [
                                {
                                    "key": "available",
                                    "value": "true"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Get Copies by Book",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/copies?bookId={{bookId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "copies"
                            ],
                            "query": [
                                {
                                    "key": "bookId",
                                    "value": "{{bookId}}"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Regular User: Create Copy (Should Fail)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"bookId\": \"{{bookId}}\",\n    \"code\": \"UNAUTHORIZED-COPY\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/copies",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "copies"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Update Copy Status",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"status\": \"AVAILABLE\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/copies/{{copyId}}/status",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "copies",
                                "{{copyId}}",
                                "status"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udcc5 Loans",
            "item": [
                {
                    "name": "\u2705 Admin: Create Loan",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('loanId', response._id);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"{{regularUserId}}\",\n    \"copyId\": \"{{copyId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/loans",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Get All Loans",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Loans array returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/loans",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 User: Get My Loans",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User can see own loans\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/loans/my-loans",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans",
                                "my-loans"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c User: Get All Loans (Should Fail)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/loans",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Get Active Loans",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/loans?status=ACTIVE",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans"
                            ],
                            "query": [
                                {
                                    "key": "status",
                                    "value": "ACTIVE"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Get Loans by User",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/loans?userId={{regularUserId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans"
                            ],
                            "query": [
                                {
                                    "key": "userId",
                                    "value": "{{regularUserId}}"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Return Loan",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Loan returned successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('returned');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/loans/{{loanId}}/return",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans",
                                "{{loanId}}",
                                "return"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c User: Create Loan (Should Fail)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"{{regularUserId}}\",\n    \"copyId\": \"{{copyId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/loans",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udccb Reservations",
            "item": [
                {
                    "name": "\u2705 User: Create My Reservation",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('reservationId', response._id);",
                                    "    pm.test(\"Reservation created successfully\", function () {",
                                    "        pm.response.to.have.status(201);",
                                    "    });",
                                    "} else if (pm.response.code === 400) {",
                                    "    // Si hay copias disponibles, la reserva no es necesaria",
                                    "    pm.test(\"Reservation not needed - copies available\", function () {",
                                    "        var jsonData = pm.response.json();",
                                    "        pm.expect(jsonData.message).to.include('available copies');",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"bookId\": \"{{bookId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/reservations/my-reservations",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "reservations",
                                "my-reservations"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 User: Get My Reservations",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User can see own reservations\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/reservations/my-reservations",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "reservations",
                                "my-reservations"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Get All Reservations",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Reservations array returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/reservations",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "reservations"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c User: Get All Reservations (Should Fail)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/reservations",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "reservations"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Create Direct Reservation",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"{{regularUserId}}\",\n    \"bookId\": \"{{bookId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/reservations",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "reservations"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Get Active Reservations",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/reservations?status=ACTIVE",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "reservations"
                            ],
                            "query": [
                                {
                                    "key": "status",
                                    "value": "ACTIVE"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Get Reservations by Book",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/reservations?bookId={{bookId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "reservations"
                            ],
                            "query": [
                                {
                                    "key": "bookId",
                                    "value": "{{bookId}}"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udd12 Authorization Tests",
            "item": [
                {
                    "name": "\u274c Access Protected Route Without Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Unauthorized message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('Not Authorized');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Access with Invalid Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer invalid-token-here"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/profile",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "profile"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Access Admin Route with User Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});",
                                    "",
                                    "pm.test(\"Insufficient permissions message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('permissions');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{regularUserId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "{{regularUserId}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83e\uddea Data Validation Tests",
            "item": [
                {
                    "name": "\u274c Create User with Invalid Email",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Validation error returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('issues');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"invalid-email\",\n    \"password\": \"password123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Create User with Short Password",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@valid.com\",\n    \"password\": \"123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Create Book with Invalid ISBN",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Test Book\",\n    \"author\": \"Test Author\",\n    \"isbn\": \"123\",\n    \"categoryId\": \"{{categoryId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/books",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Create Book with Non-existent Category",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Category not found message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('Category not found');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Test Book\",\n    \"author\": \"Test Author\",\n    \"isbn\": \"9781234567890\",\n    \"categoryId\": \"507f1f77bcf86cd799439011\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/books",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udd04 Business Logic Tests",
            "item": [
                {
                    "name": "\u2705 Test Complete Flow: Book \u2192 Copy \u2192 Loan \u2192 Return",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Este test simula el flujo completo de un libro"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Complete flow test setup\", function () {",
                                    "    pm.expect(pm.collectionVariables.get('bookId')).to.not.be.undefined;",
                                    "    pm.expect(pm.collectionVariables.get('copyId')).to.not.be.undefined;",
                                    "    pm.expect(pm.collectionVariables.get('adminToken')).to.not.be.undefined;",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/books/{{bookId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books",
                                "{{bookId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Try to Loan Unavailable Copy",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Si la copia ya est\u00e1 prestada, deber\u00eda fallar",
                                    "if (pm.response.code === 400) {",
                                    "    pm.test(\"Cannot loan unavailable copy\", function () {",
                                    "        var jsonData = pm.response.json();",
                                    "        pm.expect(jsonData.message).to.include('not available');",
                                    "    });",
                                    "} else {",
                                    "    pm.test(\"Loan created or copy was available\", function () {",
                                    "        pm.expect(pm.response.code).to.be.oneOf([201, 400]);",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"userId\": \"{{regularUserId}}\",\n    \"copyId\": \"{{copyId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/loans",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Try to Create Duplicate User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"User already exists message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('already exists');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Duplicate Admin\",\n    \"email\": \"admin@biblioicesi.com\",\n    \"password\": \"password123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "\u274c Try to Create Book with Duplicate ISBN",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"ISBN already exists message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('ISBN already exists');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Duplicate Book\",\n    \"author\": \"Another Author\",\n    \"isbn\": \"9780345391803\",\n    \"categoryId\": \"{{categoryId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/books",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83d\udcca Advanced Queries",
            "item": [
                {
                    "name": "\u2705 Search Books with Multiple Parameters",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/books?search=Douglas&category={{categoryId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ],
                            "query": [
                                {
                                    "key": "search",
                                    "value": "Douglas"
                                },
                                {
                                    "key": "category",
                                    "value": "{{categoryId}}"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Get Books with Available Copies Only",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Only books with available copies\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "    // Todos los libros retornados deber\u00edan tener copias disponibles",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/books?available=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books"
                            ],
                            "query": [
                                {
                                    "key": "available",
                                    "value": "true"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Get Overdue Loans",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/loans?overdue=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "loans"
                            ],
                            "query": [
                                {
                                    "key": "overdue",
                                    "value": "true"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Get Reservations by User",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/reservations?userId={{regularUserId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "reservations"
                            ],
                            "query": [
                                {
                                    "key": "userId",
                                    "value": "{{regularUserId}}"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "\ud83e\uddf9 Cleanup Tests",
            "item": [
                {
                    "name": "\u2705 Admin: Delete Test Data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Estos tests pueden fallar si los recursos ya fueron eliminados",
                                    "// o no existen, pero eso est\u00e1 bien para cleanup",
                                    "pm.test(\"Cleanup executed\", function () {",
                                    "    pm.expect([200, 404, 400]).to.include(pm.response.code);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/copies/{{copyId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "copies",
                                "{{copyId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Delete Test Book",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/books/{{bookId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "books",
                                "{{bookId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "\u2705 Admin: Delete Test Category",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/categories/{{categoryId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "categories",
                                "{{categoryId}}"
                            ]
                        }
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global pre-request script",
                    "console.log('Running request to: ' + pm.request.url);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test script",
                    "pm.test('Response time is less than 5 seconds', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "// Log response for debugging",
                    "if (pm.response.code >= 400) {",
                    "    console.log('Error Response:', pm.response.text());",
                    "}"
                ]
            }
        }
    ]
}